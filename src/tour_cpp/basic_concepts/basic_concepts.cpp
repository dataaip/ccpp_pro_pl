/**
* @file              basic_concepts.cpp
* @brief             brief
* @version           0.1
* @author            brightl birigtl3016@outlook.com
* @date              2025.07.01
* @copyright         Copyright (c) 2025.
*
* @note              Revision History:
* <table>
* <tr><th>Date       <th>Version         <th>Author          <th>Description
* <tr><td>2025.07.01 <td>0.1             <td>brightl         <td>description
* </table>
*/

#include <iostream>

#define TOUR_CPP_BASIC_CONCEPTS

/*
### 基本概念

本节提供描述 C++ 编程语言时使用的特定术语和概念的定义。

C++ 程序是包含声明的文本文件（通常是头文件和源文件）的序列。它们经过转换成为可执行程序，该程序在 C++ 实现调用其 main 函数时执行。

C++ 程序中的某些单词具有特殊含义，这些单词称为关键字。其他 Cookie 可用作标识符。在翻译过程中，将忽略注释。C++ 程序还包含文本，其中字符的值由字符集和编码决定。程序中的某些字符必须用转义序列表示。

C++ 程序的实体包括值、对象、引用、结构化绑定（自 C++17 起）、函数、枚举器、类型、类成员、模板、模板特化、包（自 C++11 起）和命名空间。预处理器宏不是 C++ 实体。

声明可以引入实体，将它们与名称相关联并定义它们的属性。定义使用实体所需的所有属性的声明是定义。程序必须仅包含 ODR 使用的任何非内联函数或变量的一个定义。

函数的定义通常包括语句序列，其中一些包括表达式，这些表达式指定程序要执行的计算。

在程序中遇到的名称与使用 name lookup 引入它们的声明相关联。每个名称仅在程序中称为其范围的部分内有效。某些名称具有链接，这使得它们在出现在不同的范围或翻译单元中时引用相同的实体。

C++ 中的每个对象、引用、函数、表达式都与一个类型相关联，该类型可以是基本类型、复合类型或用户定义的类型、完整或不完整的类型等。

不是非静态数据成员的声明对象和声明的引用是变量。
*/

/*
我们正在处理关于C++基本概念的描述，需要深入解释、举例说明并总结。以下是对每个关键点的详细展开：

### 1. **C++程序结构**
   - **定义**：C++程序由头文件（`.h`或`.hpp`）和源文件（`.cpp`）组成，经过编译和链接生成可执行文件。程序从`main`函数开始执行（全局作用域）。
   - **示例**：
     ```cpp
     // main.cpp
     #include <iostream>  // 标准头文件

     int main() {          // 程序入口
         std::cout << "Hello, C++!\n";
         return 0;
     }
     ```
   - **编译过程**：`g++ main.cpp -o program` → 生成`program`可执行文件。

### 2. **关键字与标识符**
   - **关键字**：C++保留的具有特殊含义的单词（如`class`, `virtual`, `noexcept`）。C++20有约90个关键字。
     ```cpp
     int class = 5; // 错误：class是关键字
     ```
   - **标识符**：用户定义的名称，规则：
     - 由字母、数字、下划线组成，首字符不能是数字。
     - 区分大小写（`value`和`Value`不同）。
     - **特殊标识符**：`override`（C++11起为关键字，但可作标识符兼容旧代码，不推荐）。
     - **示例**：
       ```cpp
       double total_price;   // 变量标识符
       class Widget { ... }; // 类名标识符
       ```

### 3. **注释与字符处理**
   - **注释**：被编译器忽略的文本。
     - `//` 单行注释，`/ * * /` 多行注释。
     - **示例**：`// 计算总和`
   - **字符集与转义序列**：
     - 源文件字符集（如UTF-8）。
     - 转义序列：`\n`（换行）、`\t`（制表符）、`\u03C0`（Unicode字符π）。
     - **示例**：`std::cout << "Line1\nLine2";`

### 4. **C++实体（Entities）**
   - **定义**：程序中的核心构建块，包括：
     | 实体类型          | 说明                          | 示例                     |
     |-------------------|-------------------------------|--------------------------|
     | 值                | 如`42`, `3.14`                | `int x = 42;`            |
     | 对象              | 内存区域（变量、数组等）       | `int arr[10];`           |
     | 引用              | 对象的别名                    | `int& ref = x;`          |
     | 结构化绑定 (C++17)| 分解对象成员                  | `auto [a,b] = std::pair(1,2);` |
     | 函数              | 可执行代码单元                | `void f() {}`            |
     | 类型              | 定义对象的属性和操作          | `typedef int Integer;`   |
     | 模板              | 泛型编程结构                  | `template<typename T> class Box;` |
     | 命名空间          | 作用域容器                    | `namespace NS { ... }`   |
   - **非实体**：预处理器宏（如`#define PI 3.14`）不是C++实体。

### 5. **声明与定义**
   - **声明**：引入名称并描述类型（不分配存储）。
   - **定义**：完整描述实体并分配存储（变量/函数体）。
   - **ODR（One Definition Rule）**：
     - 非内联函数/全局变量在程序中只能有一个定义。
     - 内联函数/变量可多文件定义（需相同）。
   - **示例**：
     ```cpp
     // 声明（非定义）
     extern int global_var; 
     void func(); 

     // 定义
     int global_var = 10; 
     void func() { std::cout << global_var; }
     ```

### 6. **名称查找与作用域**
   - **名称查找**：将名称关联到声明。
     - **限定查找**：`std::cout`（通过命名空间）。
     - **非限定查找**：从当前作用域向外查找。
   - **作用域**：名称有效范围。
     - **块作用域**：`{}`内（如函数局部变量）。
     - **类作用域**：类定义内。
     - **命名空间作用域**：跨文件。
   - **示例**：
     ```cpp
     int x = 10; // 文件作用域

     void foo() {
         int x = 20; // 块作用域（隐藏外部x）
         std::cout << x; // 输出20
     }
     ```

### 7. **链接（Linkage）**
   - **定义**：决定不同作用域/翻译单元的名称是否指向同一实体。
     - **外部链接**：`extern`（默认），跨文件可见。
     - **内部链接**：`static`或匿名命名空间，仅当前文件可见。
     - **无链接**：局部变量。
   - **示例**：
     ```cpp
     // file1.cpp
     extern int shared; // 声明（外部链接）

     // file2.cpp
     int shared = 100;  // 定义（外部链接）
     static int local = 200; // 内部链接（仅file2.cpp可见）
     ```

### 8. **类型系统**
   - **类型分类**：
     - **基础类型**：`int`, `char`, `bool`等。
     - **复合类型**：指针（`int*`）、数组（`int[10]`）、引用（`int&`）。
     - **用户定义类型**：类、枚举、联合。
     - **完整/不完整类型**：不完整类型（如前置声明）不能定义对象。
   - **示例**：
     ```cpp
     class ForwardDecl; // 不完整类型（不能实例化）

     class Defined {    // 完整类型
         int data;
     };
     ```

### 9. **变量（Variables）**
   - **定义**：非静态数据成员的对象或引用。
     - **变量示例**：
       ```cpp
       int global;          // 全局变量
       static int persistent; // 静态局部变量
       int main() {
           int local;        // 局部变量
           int& ref = local; // 引用变量
       }
       ```
     - **非变量**：类成员（除非`static`）、函数参数（视为局部变量）。

---

### **总结**
| **概念**         | **核心要点**                                      | **关键区别（vs C）**              |
|------------------|--------------------------------------------------|-----------------------------------|
| 程序结构         | 头文件+源文件 → 编译 → 可执行文件 → `main` 启动   | 类似C，但支持更多标准库（如`<iostream>`） |
| 实体             | 值/对象/引用/函数/类型/模板/命名空间等           | C++17新增结构化绑定               |
| 声明与定义       | ODR规则严格控制定义唯一性                        | 内联变量/函数放宽ODR              |
| 名称查找         | 支持ADL（参数依赖查找）和命名空间                | 比C更复杂的作用域规则             |
| 链接             | 外部/内部/无链接（新增匿名命名空间内部链接方式） | `static`仍可用，匿名命名空间更现代 |
| 类型系统         | 更丰富（类、模板、引用等）                       | 引用类型是C++独有                 |
| 变量             | 明确排除非静态数据成员                           | 类成员默认不是变量                |

C++程序以`main`为起点，通过实体（对象/函数/类型等）构建逻辑。名称查找、作用域和链接共同管理标识符的可见性，类型系统确保操作安全。ODR规则是保证程序一致性的关键基石，而C++17后的结构化绑定等特性进一步简化了数据操作。
*/


/**
* @brief             brief
* @return  int       Return Description
*
* @note              Revision History
*/
auto basic_concepts_fn() -> int
{

    std::cout << "basic concepts function begin..." << std::endl;
    std::cout << "你好, 世界!\n";  // Unicode 支持

    return 0;
}