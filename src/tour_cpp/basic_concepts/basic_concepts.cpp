/**
* @file              basic_concepts.cpp
* @brief             brief
* @version           0.1
* @author            brightl birigtl3016@outlook.com
* @date              2025.07.01
* @copyright         Copyright (c) 2025.
*
* @note              Revision History:
* <table>
* <tr><th>Date       <th>Version         <th>Author          <th>Description
* <tr><td>2025.07.01 <td>0.1             <td>brightl         <td>description
* </table>
*/

#include <iostream>

#define TOUR_CPP_BASIC_CONCEPTS

/*
### 基本概念

本节提供描述 C++ 编程语言时使用的特定术语和概念的定义。

C++ 程序是包含声明的文本文件（通常是头文件和源文件）的序列。它们经过转换成为可执行程序，该程序在 C++ 实现调用其 main 函数时执行。

C++ 程序中的某些单词具有特殊含义，这些单词称为关键字。其他 Cookie 可用作标识符。在翻译过程中，将忽略注释。C++ 程序还包含文本，其中字符的值由字符集和编码决定。程序中的某些字符必须用转义序列表示。

C++ 程序的实体包括值、对象、引用、结构化绑定（自 C++17 起）、函数、枚举器、类型、类成员、模板、模板特化、包（自 C++11 起）和命名空间。预处理器宏不是 C++ 实体。

声明可以引入实体，将它们与名称相关联并定义它们的属性。定义使用实体所需的所有属性的声明是定义。程序必须仅包含 ODR 使用的任何非内联函数或变量的一个定义。

函数的定义通常包括语句序列，其中一些包括表达式，这些表达式指定程序要执行的计算。

在程序中遇到的名称与使用 name lookup 引入它们的声明相关联。每个名称仅在程序中称为其范围的部分内有效。某些名称具有链接，这使得它们在出现在不同的范围或翻译单元中时引用相同的实体。

C++ 中的每个对象、引用、函数、表达式都与一个类型相关联，该类型可以是基本类型、复合类型或用户定义的类型、完整或不完整的类型等。

不是非静态数据成员的声明对象和声明的引用是变量。
*/

/*
### 深入解析 C++ 语言基本概念

#### 1. **C++ 程序结构**
   - **本质**：C++ 程序由头文件（`.hpp`/`.h`）和源文件（`.cpp`）组成，经编译器处理生成可执行文件。
   - **执行入口**：标准规定从 `main()` 函数开始执行。
   - **关键特性**：
     - 支持 Unicode 和转义序列（如 `\n` 换行）
     - 注释被编译器忽略（`//` 单行，`/ * * /` 多行）
   - **示例**：
     ```cpp
     // main.cpp
     #include <iostream>  // 头文件

     int main() {
         std::cout << "你好, 世界!\n";  // Unicode 支持
         return 0;
     }
     ```

#### 2. **关键字与标识符**
   - **关键字**：C++20 有 84 个保留字（如 `class`, `template`, `noexcept`）
   - **标识符规则**：
     - 允许 Unicode 字符（如 `int 变量1 = 10;`）
     - 区分大小写（`var` ≠ `Var`）
   - **示例**：
     ```cpp
     double π = 3.14159;  // Unicode 标识符
     ```

#### 3. **核心实体 (Entities)**
   | **实体类型**       | **描述**                          | **示例**                     |
   |--------------------|-----------------------------------|------------------------------|
   | 对象 (Object)      | 存储数据的内存区域                | `int x = 5;`                 |
   | 引用 (Reference)   | 对象的别名                        | `int &ref = x;`              |
   | 结构化绑定 (C++17) | 分解结构化对象                    | `auto [a,b] = std::pair(1,2);`|
   | 函数               | 可执行代码单元                    | `void f() { ... }`           |
   | 模板               | 泛型编程机制                      | `template<typename T> T max(T a, T b);`|
   | 命名空间           | 防止命名冲突的容器                | `namespace MyLib { ... }`    |
   - **非实体**：预处理器宏（如 `#define PI 3.14`）

#### 4. **声明与定义**
   - **声明**：引入名称和基本属性（可多次出现）
     ```cpp
     extern int global_var;  // 声明
     ```
   - **定义**：提供完整实现（必须唯一）
     ```cpp
     int global_var = 42;    // 定义
     ```
   - **ODR 规则** (One Definition Rule)：
     - 非内联函数/变量只能有一个定义
     - 违反示例（错误）：
       ```cpp
       // file1.cpp
       int shared = 100;
       
       // file2.cpp
       int shared = 200;  // 违反 ODR
       ```

#### 5. **名称查找与作用域**
   - **名称查找**：编译器确定标识符关联声明的过程
     ```cpp
     int x = 10;
     int main() {
         int x = 20;
         std::cout << x;    // 输出 20（局部变量优先）
     }
     ```
   - **作用域类型**：
     - 块作用域：`{}` 内
     - 类作用域：类定义内
     - 命名空间作用域：`namespace` 内

#### 6. **链接属性**
   - **外部链接** (`extern`)：跨文件可见
   - **内部链接** (`static`/`匿名命名空间`)：文件内可见
     ```cpp
     // file.cpp
     namespace { 
         int hidden = 30;  // 内部链接
     }
     ```

#### 7. **类型系统**
   - **类型分类**：
     ```mermaid
     graph LR
     A[类型] --> B[基本类型]
     A --> C[复合类型]
     A --> D[用户定义类型]
     B --> E[int, char, bool]
     C --> F[指针, 数组, 引用]
     D --> G[类, 枚举, 结构体]
     ```
   - **不完整类型**：声明但未定义的类型（如 `class ForwardDeclared;`）

#### 8. **变量定义**
   - **变量** = 对象（非类成员） + 引用
     ```cpp
     int obj = 10;          // 对象变量
     int &ref = obj;        // 引用变量
     ```
   - **非变量示例**：
     ```cpp
     class MyClass {
         static int s_member;  // 类成员（非变量）
     };
     ```

---

### 关键概念对比表（C vs C++）
| **概念**         | C 语言                          | C++ 语言                            |
|------------------|--------------------------------|-------------------------------------|
| 程序入口         | `main` 函数                    | `main` 函数                         |
| 核心实体         | 对象/函数                      | 对象/引用/模板/命名空间等 12+ 种实体 |
| 类型系统         | 基础类型 + 结构体/联合         | 类/模板/运算符重载等丰富类型系统     |
| 名称管理         | 4 种命名空间                   | 名称查找 + ADL（参数依赖查找）       |
| 跨文件共享       | `extern`/`static`              | 新增匿名命名空间                     |
| 变量定义         | 仅对象                         | 对象 + 引用                         |

### 总结
C++ 程序是**文本文件集合**（头文件 + 源文件），通过编译链接生成可执行文件，标准入口为 `main()` 函数。  
**关键字**（如 `class`）有特殊含义，**标识符**支持 Unicode 命名。程序由**实体**（对象/引用/模板等）构成，通过**声明引入**，**定义实现**，并受 **ODR 规则**约束（非内联实体单一定义）。  

**名称查找**在作用域（局部/类/命名空间）内解析标识符，**链接属性**（外部/内部）控制跨文件可见性。**类型系统**覆盖基本类型、复合类型和用户定义类型（包括不完整类型）。  
**变量**特指非静态成员的对象和引用，与类成员区分。C++ 在 C 基础上扩展了面向对象（类/继承）、泛型（模板）、现代特性（结构化绑定）等核心机制，形成更强大的类型安全和抽象能力。
*/

double π = 3.14159;  // 关键字与标识符: Unicode 标识符

extern int global_var; // 声明
int        global_var = 42; // 定义

// file1.cpp
int shared = 100;
// file2.cpp
// int shared = 200;  // ODR 规则：违反 ODR，非内联函数/变量只能有一个定义

int x = 10;
auto main_fn() -> int
{
    int x = 20;
    std::cout << x;    // 名称查找与作用域：输出 20（局部变量优先）
}

// file.cpp
namespace { 
    int hidden = 30;  //  链接属性：内部链接
}

int obj = 10;          // 变量定义：对象变量
int &ref = obj;        // 引用变量

class MyClass
{
    static int s_member;  // 类成员（非变量）
};

/**
* @brief             brief
* @return  int       Return Description
*
* @note              Revision History
*/
auto basic_concepts_fn() -> int
{

    std::cout << "basic concepts function begin..." << std::endl;
    std::cout << "你好, 世界!\n";  // Unicode 支持

    return 0;
}