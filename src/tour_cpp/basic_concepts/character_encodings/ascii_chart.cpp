/**
* @file              ascii_chart.cpp
* @brief             brief
* @version           0.1
* @author            brightl birigtl3016@outlook.com
* @date              2025.07.03
* @copyright         Copyright (c) 2025.
*
* @note              Revision History:
* <table>
* <tr><th>Date       <th>Version         <th>Author          <th>Description
* <tr><td>2025.07.03 <td>0.1             <td>brightl         <td>description
* </table>
*/

#include <iostream>

#define TOUR_CPP_BASIC_CONCEPTS_CHARACTER_ENCODINGS

/*
### ASCII 图表 C++ C++ 语言

下表包含所有 128 个 ASCII 十进制 （dec）、八进制 （oct）、十六进制 （hex） 和字符 （ch） 代码。

dec	oct	hex	ch		dec	oct	hex	ch		dec	oct	hex	ch		dec	oct	hex	ch
0	0	00	NUL（空）	32	40	20	（空格）	64	100	40	@	96	140	60	`
1	1	01	SOH（标头的开头）	33	41	21	!	65	101	41	A	97	141	61	a
2	2	02	STX（文本开头）	34	42	22	"	66	102	42	B	98	142	62	b
3	3	03	ETX（文末）	35	43	23	#	67	103	43	C	99	143	63	c
4	4	04	EOT（传输结束）	36	44	24	$	68	104	44	D	100	144	64	d
5	5	05	ENQ（查询）	37	45	25	%	69	105	45	E	101	145	65	e
6	6	06	ACK（确认）	38	46	26	&	70	106	46	F	102	146	66	f
7	7	07	BEL（铃铛）	39	47	27	'	71	107	47	G	103	147	67	g
8	10	08	BS（退格键）	40	50	28	(	72	110	48	H	104	150	68	h
9	11	09	HT（水平选项卡）	41	51	29	)	73	111	49	I	105	151	69	i
10	12	0a	LF（换行 - 新行）	42	52	2a	*	74	112	4a	J	106	152	6a	j
11	13	0b	VT（垂直选项卡）	43	53	2b	+	75	113	4b	K	107	153	6b	k
12	14	0c	FF（表单馈送 - 新页面）	44	54	2c	,	76	114	4c	L	108	154	6c	l
13	15	0d	CR（回车）	45	55	2d	-	77	115	4d	M	109	155	6d	m
14	16	0e	SO（移出）	46	56	2e	.	78	116	4e	N	110	156	6e	n
15	17	0f	SI（Shift 键）	47	57	2f	/	79	117	4f	O	111	157	6f	o
16	20	10	DLE（数据链路转义）	48	60	30	0	80	120	50	P	112	160	70	p
17	21	11	DC1（设备控制 1）	49	61	31	1	81	121	51	Q	113	161	71	q
18	22	12	DC2（设备控制 2）	50	62	32	2	82	122	52	R	114	162	72	r
19	23	13	DC3（设备控制 3）	51	63	33	3	83	123	53	S	115	163	73	s
20	24	14	DC4（设备控制 4）	52	64	34	4	84	124	54	T	116	164	74	t
21	25	15	NAK（否定承认）	53	65	35	5	85	125	55	U	117	165	75	u
22	26	16	SYN（同步空闲）	54	66	36	6	86	126	56	V	118	166	76	v
23	27	17	ETB（传输块末端）	55	67	37	7	87	127	57	W	119	167	77	w
24	30	18	CAN（取消）	56	70	38	8	88	130	58	X	120	170	78	x
25	31	19	EM（媒介结束）	57	71	39	9	89	131	59	Y	121	171	79	y
26	32	1a	SUB（替补）	58	72	3a	:	90	132	5a	Z	122	172	7a	z
27	33	1b	ESC（逃脱）	59	73	3b	;	91	133	5b	[	123	173	7b	{
28	34	1c	FS（文件分隔符）	60	74	3c	<	92	134	5c	\	124	174	7c	|
29	35	1d	GS（组分隔符）	61	75	3d	=	93	135	5d	]	125	175	7d	}
30	36	1e	RS（记录分隔符）	62	76	3e	>	94	136	5e	^	126	176	7e	~
31	37	1f	US（单位分隔符）	63	77	3f	?	95	137	5f	_	127	177	7f	DEL（删除）

注意：在 Unicode 中，ASCII 字符块称为 U+0000..U+007F 基本拉丁语。
*/

/*
ASCII 表格 C++ 语言

我们有一个ASCII表格，包含128个字符，分为四个部分（每列32个字符）。表格中列出了十进制(dec)、八进制(oct)、十六进制(hex)和对应的字符(ch)及其含义（对于控制字符有说明）。

 注意：0到31以及127是控制字符（不可打印），32到126是可打印字符（包括空格和标点符号、数字、字母等）。

 示例代码是C++程序，用于打印可打印的ASCII字符（从32到126）。它从空格（32）开始，到波浪号（126）结束。程序使用一个循环，每次输出一个字符，并在每32个字符后换行（通过判断(c+1)%32是否为0来决定是否换行，但由于126-32+1=95个字符，所以实际上输出为三行，第一行32个，第二行32个，第三行31个）。

 但是，示例代码的输出格式是每32个字符换行一次，但注意循环中是从空格（32）开始，到波浪号（126）结束。在输出时，每输出一个字符，后面跟一个空格，除非该字符是每行的第32个（此时输出换行符）。由于第一个字符是空格（32），那么当c+1为33时（即c为32）时，33%32=1，不为0，所以输出空格；直到c+1等于64（即c=63）时，64%32=0，则输出换行。因此，实际上每32个字符后换行。

 然而，示例输出显示了三行，每行32个字符？实际上，第一行32个字符（从32到63），第二行32个字符（64到95），第三行31个字符（96到126）。但注意输出时，每个字符后面跟一个空格，所以每行实际上是32个字符加上31个空格（共63个字符）然后换行？不，实际上输出是每个字符后跟一个空格，但每行最后一个字符后面不跟空格而是换行？不对，因为条件判断是：如果(c+1)%32为0，则输出换行，否则输出空格。所以每31个字符后就会有一个换行（因为当c+1是32的倍数时换行，而每32个字符出现一次倍数）。

 我们重新计算一下：
  从c=' '（32）开始，到c='~'（126）结束，共126-32+1=95个字符。
  输出格式：每个字符后面加一个分隔符（空格或换行），换行的条件是：当(c+1)是32的倍数时输出换行，否则输出空格。

 因此：
  第一个字符：c=32（空格），输出后，判断(32+1)=33，33%32=1（非0），输出空格。
  第二个字符：c=33（!），输出后，34%32=2，输出空格。
  ...
  当c=63（?）时，输出?，然后判断64%32=0，输出换行。
  因此第一行有32个字符（32到63），每个字符后跟一个空格，最后一个字符后跟换行。

  第二行：c=64（@）开始，到c=95（_）结束，共32个字符。当c=95时，输出_，然后c+1=96，96%32=0，所以输出换行。

  第三行：c=96（`）到c=126（~），共31个字符。当c=126时，输出~，然后c+1=127，127%32=127%32=127-3*32=127-96=31（非0），所以输出空格。但是循环已经结束，所以最后输出一个换行（程序最后有一个单独的换行）。

 但示例输出中第三行后面有一个换行，所以输出结果如示例所示。

 然而，示例输出中每行的字符排列如下：
  第一行：从空格到问号（32-63）共32个字符，但输出时每个字符后有一个空格，所以第一行有32个字符和31个空格？不对，实际上输出是：每个字符后跟一个分隔符（空格或换行）。所以第一行：32个字符，每个字符后跟一个空格（除了最后一个字符后跟换行）。但是最后一个字符（63）后面是换行，所以第一行有31个空格和1个换行（换行不占用空间，所以显示为32个字符排在一起，中间有空格？）

 实际上，输出是连续的字符和空格，然后换行。所以第一行显示为：
 "  ! \" # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?\n"
 注意：这里空格也是字符，所以第一行第一个字符是空格（32），然后空格后面又输出一个空格（分隔符），接着是感叹号，再一个空格，等等。

 因此，显示效果是每个字符之间有一个空格，每32个字符换一行。但由于第一行第一个字符是空格，所以看起来开头有一个空格。

 示例输出：
  第一行：空格开头，然后依次是!、"、#、...、?，每个字符之间有一个空格，最后换行。
  第二行：@开始，然后是A、B、...、_，每个字符之间有一个空格，最后换行。
  第三行：`开始，然后a、b、...、~，每个字符之间有一个空格，最后程序输出一个换行符（循环外的std::cout << '\n'）。

 所以输出结果如示例所示。

 总结：
  ASCII码表共有128个字符，分为控制字符（0-31和127）和可打印字符（32-126）。
  在C++中，字符类型实际上存储的是对应字符的ASCII码（整数）。因此，我们可以用循环整数来遍历字符，也可以直接用字符循环（如示例中从空格到波浪号）。

 示例程序说明：
  1. 使用char类型循环，从空格（' '）开始，到波浪号（'~'）结束。
  2. 输出每个字符。
  3. 然后判断：如果当前字符的ASCII码加1（即下一个字符的ASCII码）是32的倍数，则输出换行（表示每32个字符换行），否则输出一个空格（作为字符间的分隔）。
  4. 循环结束后，再输出一个换行。

 注意：由于可打印字符有95个，所以第一行32个字符（32-63），第二行32个字符（64-95），第三行31个字符（96-126）。

 此外，控制字符在输出时不可见，所以示例程序只打印可打印字符。

 在C++中，我们可以使用字符常量（如' '）来表示ASCII字符，也可以直接使用整数（如32）来赋值给字符变量。

 例如：
    char c = 65; // 相当于 'A'
    std::cout << c; // 输出A

 最后，关于Unicode：ASCII字符在Unicode中对应基本拉丁语块，范围是U+0000到U+007F（共128个字符）。其中U+0000到U+001F和U+007F是控制字符，U+0020到U+007E是可打印字符（与ASCII一致），U+007F是删除（DEL）。
*/

/**
* @brief             brief
* @return  int       Return Description
*
* @note              Revision History
*/
auto ascii_chart_fn() -> int
{

    std::cout << "ascii chart function begin..." << std::endl;

    std::cout << "Printable ASCII [32..126]:\n";
    for (char c{' '}; c <= '~'; ++c)
        std::cout << c << ((c + 1) % 32 ? ' ' : '\n');
    std::cout << '\n';

    // 可能的输出：
    // 
    // Printable ASCII [32..126]:
    //   ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
    // @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _
    // ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~
    
    return 0;
}